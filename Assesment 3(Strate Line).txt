#include <iostream>
#include<GL/gl.h>
#include <GL/glut.h>
#include<stdlib.h>
#include<cmath>
using namespace std;

float X1, Y1, X2, Y2;


void myDisplay(void)
{
    glClear (GL_COLOR_BUFFER_BIT);
    glColor3f (0.0, 0.0, 1.0);
    glPointSize(5.0);

    float dx , dy, x, y, s, xi, yi;
    dx = X2-X1;
    dy = Y2-Y1;

    if( abs(dx) > abs(dy) )
    {
        s = abs(dx);
    }
    else
        s = abs(dy);

    xi = dx/s;
    yi = dy/s;

    x = X1;
    y = Y1;

    glBegin(GL_POINTS);
    glVertex2i(x,y);
    glEnd();

    for (int k=1; k<=s; k++)
    {
            x = round(x + xi);
            y = round(y + yi);


            glBegin(GL_POINTS);
            glVertex2i(x,y);
            glEnd();
    }



glFlush ();
}

void myInit (void)
{
    glClearColor(1.0, 1.0, 1.0, 0.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0.0, 640.0, 0.0, 480.0);


}

int main(int argc, char** argv)
{
     cin>> X1 >> Y1;
     cin>> X2 >> Y2;



    glutInit(&argc, argv);
    glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize (640, 480);
    glutInitWindowPosition (300, 200);
    glutCreateWindow ("Assignment 3 (line)");
    glutDisplayFunc(myDisplay);
    myInit ();
    glutMainLoop();


}


#################### otherwise ######################


//#include<stdio.h>
#include <iostream>
#include<GL/gl.h>
#include <GL/glut.h>
#include<math.h>
using namespace std;

float x11,x2,y11,y2;
void plot(int x, int y)
{
glClear (GL_COLOR_BUFFER_BIT);
glColor3ub (128, 128, 128);
glPointSize(1.0);
glBegin(GL_POINTS);
glColor3ub(0,0,255);
glVertex2i(x,y);

}
void DDA(void)
{
/*double  x1, x2, y1, y2;
x1=100;
x2=200;
y1=200;
y2=300;*/
float slope=(y2-y11)/(x2-x11);
for(int i=x11; i<x2; i++)
{
    if (slope<1)
    {
        x11+=1;
        y11+=slope;
        plot(x11, round(y11));
    }
    else
    {
        x11+=slope;
        y11+=1;
        plot(round(x11),y11);
    }
}
glEnd();
glFlush();
}

void myInit (void)
{
glClearColor(255,255,255,255);
glPointSize(4.0);
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
gluOrtho2D(0.0, 640.0, 0.0, 480.0);
}





int main(int argc, char** argv)
{
    //cout<<"enter the start and end point value x1,y1,x2,y2"<<endl
    cin>>x11>>y11>>x2>>y2;
glutInit(&argc, argv);
glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
glutInitWindowSize (640, 480);
glutInitWindowPosition (100, 150);
glutCreateWindow ("");
glutDisplayFunc(DDA);
myInit ();
glutMainLoop();
}
