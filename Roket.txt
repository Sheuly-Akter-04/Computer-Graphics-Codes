

#include<cstdio>

#include <GL/gl.h>
#include <GL/glut.h>


GLfloat position = 0.0f;
GLfloat speed = 0.1f;
GLfloat positionroket=0.0f;
GLfloat speedroket = 0.1f;
GLfloat positionbullet=0.0f;
GLfloat speedbullet = 0.1f;

void update(int value) {

    if(position < -1.0)
        position = +1.0f;

    position -= speed;

	glutPostRedisplay();


	glutTimerFunc(100, update, 0);
}
void updatebullet(int value) {

    if(positionbullet > 1.0)
        positionbullet = 1.2f;

    positionbullet += speedbullet;

	glutPostRedisplay();


	glutTimerFunc(100, updatebullet, 0);
}
void init() {
   glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
}

void handleMouse(int button, int state, int x, int y) {
	if (button == GLUT_LEFT_BUTTON)
	{
		if (state == GLUT_DOWN)
		{
		    updatebullet(positionbullet);
		    //positionbullet=0.0f;

		}
		if (state == GLUT_UP)
		{
		    positionbullet=0.0f;

		}

	}


	glutPostRedisplay();
}

void handleKeypress(unsigned char key, int x, int y) {

	switch (key) {

case 'j':
    if(positionroket < -.90){
        positionroket = positionroket;
	glutPostRedisplay();

    }
    else{
        positionroket-=0.05;
    }
    break;
case 'l':
    if(positionroket > .90){
        positionroket = positionroket;
	glutPostRedisplay();
    }
    else{
        positionroket+=0.05;
    }
    break;


glutPostRedisplay();


	}
}


void display() {
   glClear(GL_COLOR_BUFFER_BIT);
   glLoadIdentity();
   glPushMatrix();
    glTranslatef(0.0f,position, 0.0f);
    glBegin(GL_TRIANGLES);
   glColor3f(1.0f, 0.80f, 0.0f);
   glVertex2f(-0.75f,0.75f);
   glVertex2f(-0.85f, 0.65f);
   glVertex2f(-0.65f, 0.65f);
   glEnd();
   glBegin(GL_TRIANGLES);
   glColor3f(1.0f, 1.0f, 1.0f);
   glVertex2f(-0.25f,0.85f);
   glVertex2f(-0.35f,0.75f);
   glVertex2f(-0.15f, 0.75f);
   glEnd();
   glBegin(GL_TRIANGLES);
   glColor3f(1.0f, 0.80f, 0.0f);
   glVertex2f(0.75f,0.75f);
   glVertex2f(0.85f, 0.65f);
   glVertex2f(0.65f, 0.65f);
   glEnd();
glPopMatrix();

glPushMatrix();
glTranslatef(positionroket,0.0f, 0.0f);
glPushMatrix();
glTranslatef(0.0f,positionbullet,0.0f);
glBegin(GL_QUADS);
   glColor3f(0.0f, 0.0f, 1.0f);
   glVertex2f(-0.02f,0.0f);
   glVertex2f(-0.02f, 0.03f);
   glVertex2f(0.02f, 0.03f);
   glVertex2f(0.02f,0.0f);
   glEnd();
   glPopMatrix();
glPushMatrix();

  /* */
   glBegin(GL_TRIANGLES);
   glColor3f(1.0f, 1.0f, 1.0f);
   glVertex2f(0.0f,0.0f);
   glVertex2f(-0.05f, -0.05f);
   glVertex2f(0.05f, -0.05f);
   glEnd();
   glBegin(GL_QUADS);
      glColor3f(1.0f, 0.50f, 0.0f);
      glVertex2f(-0.05f, -0.05f);
      glVertex2f( 0.05f, -0.05f);
      glVertex2f( 0.05f, -0.30f);
      glVertex2f(-0.05f,  -0.30f);
   glEnd();
    glBegin(GL_TRIANGLES);
   glColor3f(1.0f, 0.0f, 0.0f);
   glVertex2f(0.05f,-0.10f);
   glVertex2f(0.10f, -0.15f);
   glVertex2f(0.05f, -0.15f);
   glEnd();
    glBegin(GL_TRIANGLES);
   glColor3f(1.0f, 0.0f, 0.0f);
   glVertex2f(-0.05f,-0.10f);
   glVertex2f(-0.10f, -0.15f);
   glVertex2f(-0.05f, -0.15f);
   glEnd();
    glBegin(GL_TRIANGLES);
   glColor3f(1.0f, 0.0f, 0.0f);
   glVertex2f(0.05f,-0.20f);
   glVertex2f(0.10f, -0.30f);
   glVertex2f(0.05f, -0.30f);
   glEnd();
    glBegin(GL_TRIANGLES);
   glColor3f(1.0f, 0.0f, 0.0f);
   glVertex2f(-0.05f,-0.20f);
   glVertex2f(-0.10f, -0.30f);
   glVertex2f(-0.05f, -0.30f);
   glEnd();
    glBegin(GL_POLYGON);
      glColor3f(1.0f, 0.25f, 0.0f);
      glVertex2f(-0.10f, -0.45f);
      glVertex2f( 0.00f, -0.60f);
      glVertex2f( 0.10f, -0.45f);
      glVertex2f(0.05f, -0.30f);
      glVertex2f(-0.05f, -0.30f);
   glEnd();

glPopMatrix();
glPopMatrix();


   glFlush();
}



int main(int argc, char** argv) {
   glutInit(&argc, argv);
   glutInitWindowSize(320, 320);
   glutInitWindowPosition(50, 50);
   glutCreateWindow("Basic Animation");
   glutDisplayFunc(display);
   init();
   glutKeyboardFunc(handleKeypress);
   glutMouseFunc(handleMouse);
   glutTimerFunc(1000, update, 0);
   glutMainLoop();
   return 0;
}
